    public void PullData()
    {

    }

    private String[] GetDayData(LocalDate dayDate)
    {
        String[] resultData = null;
        HashMap<LocalDateTime, Pair<String, String>> dayData = daysData.get(dayDate);
        if(null != dayData)
        {
            resultData = new String[dayData.size()];
            int indexData = 0;
            for (Map.Entry<LocalDateTime, Pair<String, String>> entry : dayData.entrySet()) {
                resultData[indexData] = entry.getValue().first;
                indexData++;
            }
        }
        return resultData;
    }



    public void onUrlClick(View view) {
            TextView currentText = (TextView)view;
            Context context = view.getContext();
            AlertDialog.Builder newUrlDialogue = new AlertDialog.Builder(context);
            LinearLayout layout = new LinearLayout(context);
            layout.setOrientation(LinearLayout.VERTICAL);
            newUrlDialogue.setTitle("Новий адрес");
            final EditText edittext = new EditText(context);
            edittext.setText(currentText.getText());
            layout.addView(edittext);
            newUrlDialogue.setPositiveButton("Зберегти", new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int whichButton) {
                    currentText.setText(edittext.getText());
                }
            });
            newUrlDialogue.setNegativeButton("Відмінити", new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int whichButton) {
                    //TODO: do nothing
                }
            });
        }


        try {
                    HttpClient httpClient = HttpClientBuilder.create().build();
                    HttpContext localContext = new BasicHttpContext();
                    HttpGet httpGet = new HttpGet(url);
                    HttpResponse response = httpClient.execute(httpGet, localContext);
                    BufferedReader reader = new BufferedReader(
                            new InputStreamReader(
                                    response.getEntity().getContent()
                            )
                    );
                    String nextLine;
                    while ((nextLine = reader.readLine()) != null) {
                        // nextLine[] is an array of values from the line
                        Log.i("DaysDataLoader", nextLine);
                    }
                }
                catch (Exception e) {
                    Log.e("DaysDataLoader", e.toString());
                }


                private void setFaculties() {
                        Spinner spinner = (Spinner) findViewById(R.id.faculties);
                        String[] items = new String[]{"1", "2", "three"};
                        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_dropdown_item, items);
                        spinner.setAdapter(adapter);
                    }


                    faculties.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                                    @Override
                                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                                        adapterGroup.addAll(daysData.listOfFaculties.get(position));
                                    }

                                    @Override
                                    public void onNothingSelected(AdapterView<?> parent) {

                                    }
                                });



                                        if(data == null)
                                        {
                                            data = new  LinkedHashMap<LocalDateTime, Pair<String, String>>();
                                            Pair<String, String> PT = new Pair("Фізічна Культура", "");
                                            data.put(LocalDateTime.of(date.getYear(), date.getMonth(), date.getDayOfMonth(), 9, 0), PT);
                                            data.put(LocalDateTime.of(date.getYear(), date.getMonth(), date.getDayOfMonth(), 11, 30), PT);
                                            data.put(LocalDateTime.of(date.getYear(), date.getMonth(), date.getDayOfMonth(), 15, 15), PT);
                                        }


                                                try {
                                                    context.openFileOutput(scheduleSave, context.MODE_PRIVATE);
                                                } catch (FileNotFoundException e) {
                                                    Log.e("LoaderWorker", "Fail to open file output stream");
                                                }


                                                package com.example.diplomaprototype;

                                                import android.graphics.Color;
                                                import android.util.Pair;
                                                import android.view.LayoutInflater;
                                                import android.view.View;
                                                import android.view.ViewGroup;
                                                import android.widget.TextView;

                                                import androidx.annotation.NonNull;
                                                import androidx.recyclerview.widget.RecyclerView;

                                                import java.time.LocalDate;
                                                import java.time.LocalDateTime;
                                                import java.time.format.DateTimeFormatter;
                                                import java.util.HashMap;
                                                import java.util.Map;


                                                public class CalendarAdapter extends RecyclerView.Adapter<CalendarViewHolder> {
                                                    //private final ArrayList<String[]> daysOfMonth;
                                                    private final CalendarAdapter.OnItemListener listener;
                                                    private int currentDay;
                                                    private boolean modeMonth;
                                                    private DaysDataLoader daysData;
                                                    private LocalDate selectedDate;
                                                    private LocalDate currentDate;
                                                    //private int selectedDay = 1;
                                                    private int afterMouthDay = 1;
                                                    private int numberDay = 1;
                                                    private final int daysInMonth = 42;
                                                    private final int daysInWeek = 7;
                                                    public CalendarAdapter(DaysDataLoader daysData,
                                                                           LocalDate currentDate,
                                                                           LocalDate selectedDate,
                                                                           CalendarAdapter.OnItemListener inListener,
                                                                           boolean modeMonth) {
                                                        this.selectedDate = selectedDate;
                                                        this.currentDate = currentDate;
                                                        this.daysData = daysData;
                                                        listener = inListener;
                                                        currentDay = -1;
                                                        this.modeMonth = modeMonth;
                                                        //selectedDay = selectedDate.getDayOfMonth();
                                                    }

                                                    @NonNull
                                                    @Override
                                                    public CalendarViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
                                                        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
                                                        View view = inflater.inflate(R.layout.calendar_cell, parent, false);
                                                        ViewGroup.LayoutParams params = view.getLayoutParams();
                                                        if (modeMonth) {
                                                            params.height = (int) (parent.getHeight() * 0.1666666);//TODO: to final value
                                                        }
                                                        return new CalendarViewHolder(view, listener);
                                                    }

                                                    private boolean handleMonthDay(CalendarViewHolder holder, int position) {
                                                        boolean fillDay = false;
                                                        LocalDate firstDayOfMonth = selectedDate.withDayOfMonth(1);
                                                        int dayOfWeek = firstDayOfMonth.getDayOfWeek().getValue() - 1;
                                                        int daysInMonth = selectedDate.lengthOfMonth();
                                                        int dayOfMouth = position - dayOfWeek + 1;
                                                        int upperDayRange = daysInMonth + dayOfWeek;
                                                        int lowerDayRange = dayOfWeek;
                                                        if(position < lowerDayRange) {
                                                            holder.setBackgroundColor(Color.GRAY);
                                                            LocalDate localDate = firstDayOfMonth.minusDays(lowerDayRange - position);
                                                            int localDay = localDate.getDayOfMonth();
                                                            holder.dayOfMonth.setText(Integer.toString(localDay));
                                                        }
                                                        else if (position >= upperDayRange) {
                                                            holder.setBackgroundColor(Color.GRAY);
                                                            //LocalDate upperMouth = selectedDate.plusMonths(1);
                                                            holder.dayOfMonth.setText(Integer.toString(afterMouthDay));
                                                            afterMouthDay++;
                                                        }
                                                        else {
                                                            if (currentDate.isEqual(selectedDate.withDayOfMonth(dayOfMouth))) {
                                                                holder.setBackgroundColor(Color.BLUE);
                                                            }
                                                            HashMap<LocalDateTime, Pair<String, String>> data = daysData.GetCurrentsDaySchedule(selectedDate, dayOfMouth);
                                                            String dayOfMouthString = Integer.valueOf(dayOfMouth).toString();
                                                            holder.dayOfMonth.setText(dayOfMouthString);
                                                            fillDay = true;
                                                        }
                                                        return fillDay;
                                                    }

                                                    private void handleMonth(@NonNull CalendarViewHolder holder, int position) {
                                                        boolean fillDay = false;
                                                        if (holder.dayOfMonth.getText().toString().equals("TextView")) {
                                                            fillDay = handleMonthDay(holder, position);
                                                        }
                                                        if(fillDay) {
                                                            int day = Integer.valueOf(holder.dayOfMonth.getText().toString());
                                                            HashMap<LocalDateTime, Pair<String, String>> data = daysData.GetCurrentsDaySchedule(selectedDate, day);
                                                            int currentTaskIndex = 0;
                                                            if (data != null) {
                                                                for (Map.Entry<LocalDateTime, Pair<String, String>> entry : data.entrySet()) {
                                                                    if(currentTaskIndex < holder.tasks.size()) {
                                                                        TextView view = holder.tasks.get(currentTaskIndex);
                                                                        currentTaskIndex++;
                                                                        view.setVisibility(View.VISIBLE);
                                                                        view.setText(entry.getValue().first);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    private void handleWeek(@NonNull CalendarViewHolder holder, int position) {
                                                        int dayOfWeek = selectedDate.getDayOfWeek().getValue();
                                                        int dayShift = position - dayOfWeek + 1;
                                                        int dayOfMonth = selectedDate.getDayOfMonth() + dayShift;
                                                        int monthLength = selectedDate.getMonth().length(false);
                                                        if (dayOfMonth > monthLength) {
                                                            dayOfMonth = dayOfMonth - monthLength;
                                                            selectedDate.plusMonths(1);
                                                        }
                                                        LocalDate currentMonth = selectedDate;
                                                        if (dayOfMonth <= 0) {
                                                            currentMonth = selectedDate.minusMonths(1);
                                                            dayOfMonth = currentMonth.getMonth().length(false) + dayShift + 1;
                                                        }
                                                        HashMap<LocalDateTime, Pair<String, String>> data = daysData.GetCurrentsDaySchedule(selectedDate, numberDay);
                                                        holder.dayOfMonth.setText(Integer.valueOf(dayOfMonth).toString());

                                                        if (currentDate.isEqual(currentMonth.withDayOfMonth(dayOfMonth))) {
                                                            holder.setBackgroundColor(Color.BLUE);
                                                        }

                                                        if (null != data) {
                                                            int currentTaskIndex = 0;
                                                            for (Map.Entry<LocalDateTime, Pair<String, String>> entry : data.entrySet()) {
                                                                if(currentTaskIndex < holder.tasks.size() ) {
                                                                    TextView timeView = holder.tasks.get(currentTaskIndex);
                                                                    currentTaskIndex++;
                                                                    timeView.setVisibility(View.VISIBLE);
                                                                    String time = entry.getKey().format(DateTimeFormatter.ofPattern("HH:mm")).toString();
                                                                    timeView.setText(time);
                                                                    TextView view = holder.tasks.get(currentTaskIndex);
                                                                    view.setVisibility(View.VISIBLE);
                                                                    view.setText(entry.getValue().first);
                                                                    currentTaskIndex++;
                                                                }
                                                            }
                                                        }
                                                    }

                                                    @Override
                                                    public void onBindViewHolder(@NonNull CalendarViewHolder holder, int position) {
                                                        if(modeMonth) {
                                                            handleMonth(holder, position);
                                                        }
                                                        else {
                                                            handleWeek(holder, position);
                                                        }
                                                    }

                                                    @Override
                                                    public int getItemCount() {
                                                        if(modeMonth) {
                                                            return daysInMonth;
                                                        }
                                                        return daysInWeek;
                                                    }

                                                    public interface OnItemListener {
                                                        void OnItemClick(int position, String dayText);
                                                    }
                                                }


    private ServiceConnection connection = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
        }
        @Override
        public void onServiceDisconnected(ComponentName name) {
        }
    };

            bindService(intent, connection, Context.BIND_AUTO_CREATE);